"""Script for analyzing the introduction of RE sites during deep mutational scanning

Kayla Peck, 2017. 

For command line arguments, run::

    python RE_check.py -h

"""

import os
import sys
import math
import re
import argparse
#from Bio.SeqUtils import MeltingTemp as mt
from Bio.Seq import Seq


def Parser():
    """Returns command line parser."""
    parser = argparse.ArgumentParser(
            description='Script by  Kayla Peck to analyze the introduction of restriction sites during deep mutational scanning.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            )

    parser.add_argument('sequencefile', help='the name of a file giving the sequence for which you are mutagenizing')
    parser.add_argument('firstcodon', type=int, help='first codon in infile to mutagenize')
    parser.add_argument('outfile', help='name of RE output file')
	parser.add_argument('enzyme', type=char, help='specific restriction enzyme you would like to analyze')
    return parser

def MutagenizeCodon(seq, codon, cutsite):

    """Creates oligos to tile a gene and introduce NNN at each codon.

    *seq* : sequence of the gene. 

    *codon* : codon to mutagenize.
	
	*cutsite* : restriction enzyme cutsite sequence to check for.

    Mutates a codon to NNN.

    Returns a list of all possible cut-site length sequences generated by NNN at that codon.
    """
	nc = len(cutsite) #length of restriction enzyme cutsite
    n = len(seq)
    assert len(seq) % 3 == 0, "length of sequence not a multiple of 3"
	
    for i in range(ncodons):
        i = icodon * 3
        primer = "%sNNN%s" % (seq[i - flanklength : i], seq[i + 3 : i + 3 + flanklength])
        name = "%s-for-mut%d" % (prefix, firstcodon + icodon)
        primers.append((name, primer))
    return primers



def main():
    parser = Parser()
    args = vars(parser.parse_args())

    print("Read the following command line arguments")
    for (argname, argvalue) in args.items():
        print("\t%s = %s" % (argname, argvalue))


    primerlength = args['startprimerlength']

    if (primerlength <=3 ) or (primerlength % 2 == 0):
        raise ValueError("Does not appear to be valid primer length: %d" % primerlength)
    
    sequencefile = args['sequencefile']
    if not os.path.isfile(sequencefile):
        raise IOError("Cannot find sequencefile %s" % sequencefile)
    sequence = open(sequencefile).read() 
    sequence = sequence.replace(' ', '')
    sequence = sequence.replace('\n', '')
    print "Read a sequence of length %d from %s:\n%s" % (len(sequence), sequencefile, sequence)
    outfile = args['outfile']
    primerprefix = args['primerprefix']
    firstcodon =  args['firstcodon']
    print "The primers will be named with the prefix %s, and the first codon numbered as %d." % (primerprefix, firstcodon)

    # Design forward mutation primers
    mutforprimers = CreateMutForOligosVarLength(sequence, primerlength, primerprefix, firstcodon, args['maxprimertm'], args['minprimertm'], args['maxlength'], args['minlength'])
    print "Designed %d mutation forward primers." % len(mutforprimers)


    
    # Design reverse mutation primers
    mutrevprimers = [(name.replace('for', 'rev'), ReverseComplement(seq)) for (name, seq) in mutforprimers]
    print "Designed %d mutation reverse primers." % len(mutrevprimers)
   
    # Print out all of the primers
    primers = mutforprimers + mutrevprimers
    print "This gives a total of %d primers." % len(primers)


    print "\nNow writing these primers to %s" % outfile
    iplate = 1
    f = open(outfile, 'w')
    for primers in [mutforprimers, mutrevprimers]:
        f.write("\r\nPlate %d\r\n" % iplate)
        n_in_plate = 0
        for (name, primer) in primers:
            f.write("%s, %s\r\n" % (name, primer))
            n_in_plate += 1
            if n_in_plate == 96:
                n_in_plate = 0
                iplate += 1
                f.write("\r\nPlate %d\r\n" % iplate)
        if n_in_plate:
            iplate += 1


main() # run the main program
